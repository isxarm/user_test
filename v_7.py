16# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HMI_version1.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import random
import pyqtgraph as pg
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QPropertyAnimation, QEasingCurve, Qt, QTimer
from Speed_guage import GaugeWidget as GW
import numpy as np
import psutil  # Add this import at the top with other imports
from status_display import read_status_vfd  # Add this import
import threading  # Add this for running status display in background
from rpm_detect import get_rpm_values  # Add this import

class Ui_HMI(object):
    def setupUi(self, HMI):
        self.menu_buttons = []
        self.menu_labels = []
        self.menu_containers = []
        HMI.setObjectName("HMI")
        HMI.setEnabled(True)
        HMI.resize(1280, 800)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(HMI.sizePolicy().hasHeightForWidth())
        HMI.setSizePolicy(sizePolicy)
        HMI.setMinimumSize(QtCore.QSize(1280, 800))
        HMI.setMaximumSize(QtCore.QSize(1280, 800))
        self.centralwidget = QtWidgets.QWidget(HMI)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(1280, 800))
        self.centralwidget.setMaximumSize(QtCore.QSize(1280, 800))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Header_top = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Header_top.sizePolicy().hasHeightForWidth())
        self.Header_top.setSizePolicy(sizePolicy)
        self.Header_top.setStyleSheet("background-color: rgb(17, 57, 57);")
        self.Header_top.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Header_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Header_top.setObjectName("Header_top")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Header_top)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.left = QtWidgets.QFrame(self.Header_top)
        self.left.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.left.setStyleSheet("background-color: rgb(8, 43, 55);")
        self.left.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.left.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left.setObjectName("left")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.left)
        self.verticalLayout_2.setContentsMargins(32, 45, -1, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.left)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.pushButton.setFont(font)
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"\n"
"\n"
"border:none;\n"
"")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/list.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(30, 30))
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton, 0, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.horizontalLayout.addWidget(self.left)
        self.middle = QtWidgets.QFrame(self.Header_top)
        self.middle.setStyleSheet("background-color: rgb(8, 43, 55);")
        self.middle.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.middle.setFrameShadow(QtWidgets.QFrame.Raised)
        self.middle.setObjectName("middle")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.middle)
        self.horizontalLayout_2.setContentsMargins(-1, 24, -1, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.middle)
        self.label_2.setMaximumSize(QtCore.QSize(50, 50))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/white.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.middle)
        self.label.setMaximumSize(QtCore.QSize(16777209, 16777215))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.horizontalLayout.addWidget(self.middle)
        self.right = QtWidgets.QFrame(self.Header_top)
        self.right.setStyleSheet("background-color: rgb(8, 43, 55);")
        self.right.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.right.setFrameShadow(QtWidgets.QFrame.Raised)
        self.right.setObjectName("right")
        self.horizontalLayout.addWidget(self.right)
        self.verticalLayout.addWidget(self.Header_top)
        self.Header_midle = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Header_midle.sizePolicy().hasHeightForWidth())
        self.Header_midle.setSizePolicy(sizePolicy)
        self.Header_midle.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.Header_midle.setSizeIncrement(QtCore.QSize(0, 67))
        self.Header_midle.setBaseSize(QtCore.QSize(0, 109))
        self.Header_midle.setStyleSheet("background-color: rgb(17, 57, 57);")
        self.Header_midle.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Header_midle.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Header_midle.setObjectName("Header_midle")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.Header_midle)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.left_menu = QtWidgets.QFrame(self.Header_midle)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.left_menu.sizePolicy().hasHeightForWidth())
        self.left_menu.setSizePolicy(sizePolicy)
        self.left_menu.setMinimumSize(QtCore.QSize(75, 0))
        self.left_menu.setMaximumSize(QtCore.QSize(0, 16777215))
        self.left_menu.setStyleSheet("background-color: rgb(8, 43, 55);")
        self.left_menu.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.left_menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_menu.setObjectName("left_menu")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.left_menu)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.menu = QtWidgets.QFrame(self.left_menu)
        self.menu.setMinimumSize(QtCore.QSize(200, 0))
        self.menu.setMaximumSize(QtCore.QSize(886, 16777215))
        self.menu.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menu.setObjectName("menu")
        self.gridLayout = QtWidgets.QGridLayout(self.menu)
        self.gridLayout.setContentsMargins(0, 12, 10, 0)
        self.gridLayout.setHorizontalSpacing(0)
        self.gridLayout.setVerticalSpacing(45)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_4 = QtWidgets.QPushButton(self.menu)
        self.pushButton_4.setStyleSheet("border:none;")
        self.pushButton_4.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/performance.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_4.setIcon(icon1)
        self.pushButton_4.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 2, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)




        self.pushButton_2 = QtWidgets.QPushButton(self.menu)
        self.pushButton_2.setStyleSheet("*{\n"
"border:None;}")
        self.pushButton_2.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/no-connection.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon2)
        self.pushButton_2.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.pushButton_5 = QtWidgets.QPushButton(self.menu)
        self.pushButton_5.setStyleSheet("border:none;")
        self.pushButton_5.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/settings.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon3)
        self.pushButton_5.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 3, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_6 = QtWidgets.QLabel(self.menu)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 3, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.pushButton_3 = QtWidgets.QPushButton(self.menu)
        self.pushButton_3.setStyleSheet("border:none;")
        self.pushButton_3.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/heart-rate-monitor-2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon4)
        self.pushButton_3.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 1, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_4 = QtWidgets.QLabel(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.label_5 = QtWidgets.QLabel(self.menu)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 2, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.label_3 = QtWidgets.QLabel(self.menu)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.horizontalLayout_5.addWidget(self.menu, 0, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.horizontalLayout_4.addWidget(self.left_menu)
        self.middle_3 = QtWidgets.QFrame(self.Header_midle)
        self.middle_3.setStyleSheet("background-color: rgba(2, 29, 33, 247);")
        self.middle_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.middle_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.middle_3.setObjectName("middle_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.middle_3)
        self.verticalLayout_3.setContentsMargins(30, 12, 30, 30)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.stackedWidget = QtWidgets.QStackedWidget(self.middle_3)
        self.stackedWidget.setObjectName("stackedWidget")
        self.status = QtWidgets.QWidget()
        self.status.setObjectName("status")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.status)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.welcome = QtWidgets.QFrame(self.status)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.welcome.sizePolicy().hasHeightForWidth())
        self.welcome.setSizePolicy(sizePolicy)
        self.welcome.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.welcome.setFrameShadow(QtWidgets.QFrame.Raised)
        self.welcome.setObjectName("welcome")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.welcome)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.text_welcome = QtWidgets.QLabel(self.welcome)
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(62)
        self.text_welcome.setFont(font)
        self.text_welcome.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_welcome.setObjectName("text_welcome")
        self.horizontalLayout_6.addWidget(self.text_welcome)
        self.verticalLayout_4.addWidget(self.welcome, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.data_menu_left = QtWidgets.QFrame(self.status)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.data_menu_left.sizePolicy().hasHeightForWidth())
        self.data_menu_left.setSizePolicy(sizePolicy)
        self.data_menu_left.setStyleSheet("background-color: rgb(29, 47, 46);")
        self.data_menu_left.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.data_menu_left.setFrameShadow(QtWidgets.QFrame.Raised)
        self.data_menu_left.setLineWidth(3)
        self.data_menu_left.setObjectName("data_menu_left")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.data_menu_left)
        self.horizontalLayout_7.setContentsMargins(12, 12, 12, 12)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.frame = QtWidgets.QFrame(self.data_menu_left)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMaximumSize(QtCore.QSize(16777215, 1460))
        self.frame.setSizeIncrement(QtCore.QSize(0, 0))
        self.frame.setBaseSize(QtCore.QSize(0, 9))
        self.frame.setStyleSheet("")
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setContentsMargins(136 , 73 , -1, -1)
        self.gridLayout_2.setHorizontalSpacing(30)
        self.gridLayout_2.setVerticalSpacing(65)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_8 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)


       # self.label_8.setFont(font)
       # self.label_8.setStyleSheet("color: rgb(255, 255, 255);")
       # self.label_8.setObjectName("label_8")
       # self.gridLayout_2.addWidget(self.label_8, 0, 0, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7.setFixedSize(35, 35)
        self.pushButton_7.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_7.setText("")
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout_2.addWidget(self.pushButton_7, 3, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.label_16 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_16.setObjectName("label_16")
        self.gridLayout_2.addWidget(self.label_16, 5, 0, 1, 1, QtCore.Qt.AlignRight)
        self.label_9 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_9.setObjectName("label_9")
        self.gridLayout_2.addWidget(self.label_9, 2, 0, 1, 1, QtCore.Qt.AlignRight)
        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        self.pushButton_6.setFixedSize(35, 35)  # Set fixed size
        self.pushButton_6.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_6.setText("")
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout_2.addWidget(self.pushButton_6, 2, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.label_10 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setPointSize(25)
       # font.setWeight(300)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_10.setObjectName("label_10")
        self.gridLayout_2.addWidget(self.label_10, 3, 0, 1, 1, QtCore.Qt.AlignRight)
        self.pushButton_8 = QtWidgets.QPushButton(self.frame)
        self.pushButton_8.setFixedSize(35, 35)
        self.pushButton_8.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_8.setText("")
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout_2.addWidget(self.pushButton_8, 4, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.label_11 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_11.setObjectName("label_11")
        self.gridLayout_2.addWidget(self.label_11, 4, 0, 1, 1, QtCore.Qt.AlignRight)
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setFixedSize(35, 35)
        self.pushButton_9.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_9.setText("")
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout_2.addWidget(self.pushButton_9, 5, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.horizontalLayout_7.addWidget(self.frame, 0, QtCore.Qt.AlignTop)
        self.data_menu_right = QtWidgets.QFrame(self.data_menu_left)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.data_menu_right.sizePolicy().hasHeightForWidth())
        self.data_menu_right.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.data_menu_right.setFont(font)
        self.data_menu_right.setStyleSheet("")
        self.data_menu_right.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.data_menu_right.setFrameShadow(QtWidgets.QFrame.Raised)
        self.data_menu_right.setObjectName("data_menu_right")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.data_menu_right)
        self.gridLayout_3.setContentsMargins(-1, 13, -1, -1)
        self.gridLayout_3.setHorizontalSpacing(30)
        self.gridLayout_3.setVerticalSpacing(0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_13 = QtWidgets.QLabel(self.data_menu_right)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_13.setObjectName("label_13")
        self.gridLayout_3.addWidget(self.label_13, 1, 0, 1, 1, QtCore.Qt.AlignRight)

        
        self.label_15 = QtWidgets.QLabel(self.data_menu_right)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_15.setObjectName("label_15")
        self.gridLayout_3.addWidget(self.label_15, 3, 0, 1, 1, QtCore.Qt.AlignRight)
        self.label_12 = QtWidgets.QLabel(self.data_menu_right)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_12.setObjectName("label_12")
        self.gridLayout_3.addWidget(self.label_12, 0, 0, 1, 1, QtCore.Qt.AlignRight)
        self.label_14 = QtWidgets.QLabel(self.data_menu_right)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_14.setObjectName("label_14")
        self.gridLayout_3.addWidget(self.label_14, 2, 0, 1, 1, QtCore.Qt.AlignRight)
        self.pushButton_10 = QtWidgets.QPushButton(self.data_menu_right)
        self.pushButton_10.setFixedSize(35, 35)
        self.pushButton_10.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_10.setText("")
        self.pushButton_10.setObjectName("pushButton_10")
        self.gridLayout_3.addWidget(self.pushButton_10, 0, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.pushButton_11 = QtWidgets.QPushButton(self.data_menu_right)
        self.pushButton_11.setFixedSize(35, 35)
        self.pushButton_11.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_11.setText("")
        self.pushButton_11.setObjectName("pushButton_11")
        self.gridLayout_3.addWidget(self.pushButton_11, 1, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.pushButton_12 = QtWidgets.QPushButton(self.data_menu_right)
        self.pushButton_12.setFixedSize(35, 35)
        self.pushButton_12.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_12.setText("")
        self.pushButton_12.setObjectName("pushButton_12")
        self.gridLayout_3.addWidget(self.pushButton_12, 2, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.pushButton_13 = QtWidgets.QPushButton(self.data_menu_right)
        self.pushButton_13.setFixedSize(35, 35)
        self.pushButton_13.setStyleSheet("""
            QPushButton {
                background-color: #FF1493;
                border-radius: 17px;
                border: none;
            }
        """)
        self.pushButton_13.setText("")
        self.pushButton_13.setObjectName("pushButton_13")
        self.gridLayout_3.addWidget(self.pushButton_13, 3, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.horizontalLayout_7.addWidget(self.data_menu_right)
        self.verticalLayout_4.addWidget(self.data_menu_left)
        self.stackedWidget.addWidget(self.status)
        self.monitor = QtWidgets.QWidget()
        self.monitor.setObjectName("monitor")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.monitor)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.monitor_top = QtWidgets.QFrame(self.monitor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.monitor_top.sizePolicy().hasHeightForWidth())
        self.monitor_top.setSizePolicy(sizePolicy)
        self.monitor_top.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.monitor_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.monitor_top.setLineWidth(5)
        self.monitor_top.setObjectName("monitor_top")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.monitor_top)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.graph = QtWidgets.QFrame(self.monitor_top)
        self.graph.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.graph.setFrameShadow(QtWidgets.QFrame.Raised)
        self.graph.setObjectName("graph")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.graph)
        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_14.setSpacing(0)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.pushButton_14 = QtWidgets.QPushButton(self.graph)
        self.pushButton_14.setStyleSheet("border:none;")
        self.pushButton_14.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/settings-2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_14.setIcon(icon7)
        self.pushButton_14.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_14.setObjectName("pushButton_14")
        self.horizontalLayout_14.addWidget(self.pushButton_14, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignTop)
        self.horizontalLayout_8.addWidget(self.graph)
        self.verticalLayout_5.addWidget(self.monitor_top)
        self.monitor_middle = QtWidgets.QFrame(self.monitor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.monitor_middle.sizePolicy().hasHeightForWidth())
        self.monitor_middle.setSizePolicy(sizePolicy)
        self.monitor_middle.setMinimumSize(QtCore.QSize(0, 250))
        self.monitor_middle.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.monitor_middle.setFrameShadow(QtWidgets.QFrame.Raised)
        self.monitor_middle.setObjectName("monitor_middle")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.monitor_middle)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")

        self.gauge1 = QtWidgets.QFrame(self.monitor_middle)
        self.gauge1.setFrameShape(QtWidgets.QFrame.Panel)
        self.gauge1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.gauge1.setLineWidth(5)
        self.gauge1.setObjectName("gauge1")
         
        # Create gauge widget for Voltage
        self.gauge_widget1 = GW(self.gauge1, "VOLTAGE", unit="V", min_value=0, max_value=220)
        self.gauge_widget1.setGeometry(20, 10, 250, 250)
        self.gauge_widget1.set_speed(0)

        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.gauge1)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.setting1 = QtWidgets.QPushButton(self.gauge1)
        self.setting1.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
                padding: 5px;
                border-radius: 17px;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 40);
                border: 2px solid rgba(255, 255, 255, 60);
            }
            QPushButton:pressed {
                background-color: rgba(0, 255, 255, 40);
                border: 2px solid rgba(0, 255, 255, 60);
            }
        """)
        self.setting1.setText("")
        self.setting1.setIcon(icon7)
        self.setting1.setIconSize(QtCore.QSize(25, 25))
        self.setting1.setFixedSize(35, 35)
        self.setting1.setObjectName("setting1")
        self.horizontalLayout_10.addWidget(self.setting1, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignTop)
        self.horizontalLayout_9.addWidget(self.gauge1)
        self.gauge2 = QtWidgets.QFrame(self.monitor_middle)
        self.gauge2.setFrameShape(QtWidgets.QFrame.Panel)
        self.gauge2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.gauge2.setLineWidth(5)
        self.gauge2.setObjectName("gauge2")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.gauge2)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.setting2 = QtWidgets.QPushButton(self.gauge2)
        self.setting2.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
                padding: 5px;
                border-radius: 17px;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 40);
                border: 2px solid rgba(255, 255, 255, 60);
            }
            QPushButton:pressed {
                background-color: rgba(0, 255, 255, 40);
                border: 2px solid rgba(0, 255, 255, 60);
            }
        """)
        self.setting2.setText("")
        self.setting2.setIcon(icon7)
        self.setting2.setIconSize(QtCore.QSize(25, 25))
        self.setting2.setFixedSize(35, 35)
        self.setting2.setObjectName("setting2")
        self.horizontalLayout_11.addWidget(self.setting2, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignTop)
        self.horizontalLayout_9.addWidget(self.gauge2)
           # Create gauge widget for Current
        self.gauge_widget2 = GW(self.gauge2, "CURRENT", unit="A", min_value=0, max_value=3)
        self.gauge_widget2.setGeometry(20, 10, 250, 250)
        self.gauge_widget2.set_speed(0)

        # Create a container frame for setting2 button
        self.setting2_container = QtWidgets.QFrame(self.gauge2)
        self.setting2_container.setGeometry(self.gauge2.width() - 40, 5, 35, 35)
        self.setting2_container.setStyleSheet("background: transparent;")
        
        # Create setting2 button
        self.setting2 = QtWidgets.QPushButton(self.setting2_container)
        self.setting2.setGeometry(0, 0, 35, 35)
        self.setting2.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 30);
                border-radius: 17px;
            }
        """)
        self.setting2.setCursor(QtCore.Qt.PointingHandCursor)
        self.setting2.setText("")
        self.setting2.setIcon(icon7)
        self.setting2.setIconSize(QtCore.QSize(25, 25))
        self.setting2.setObjectName("setting2")

        self.gague3 = QtWidgets.QFrame(self.monitor_middle)
        self.gague3.setFrameShape(QtWidgets.QFrame.Panel)
        self.gague3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.gague3.setLineWidth(5)
        self.gague3.setObjectName("gague3")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.gague3)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setSpacing(0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.setting3 = QtWidgets.QPushButton(self.gague3)
        self.setting3.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
                padding: 5px;
                border-radius: 17px;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 40);
                border: 2px solid rgba(255, 255, 255, 60);
            }
            QPushButton:pressed {
                background-color: rgba(0, 255, 255, 40);
                border: 2px solid rgba(0, 255, 255, 60);
            }
        """)
        self.setting3.setText("")
        self.setting3.setIcon(icon7)
        self.setting3.setIconSize(QtCore.QSize(25, 25))
        self.setting3.setFixedSize(35, 35)
        self.setting3.setObjectName("setting3")
        self.horizontalLayout_12.addWidget(self.setting3, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignTop)
        self.horizontalLayout_9.addWidget(self.gague3)

        # Create gauge widget for Frequency
        self.gauge_widget3 = GW(self.gague3, "FREQUENCY", unit="Hz", min_value=0, max_value=60)
        self.gauge_widget3.setGeometry(20, 10, 250, 250)
        self.gauge_widget3.set_speed(0)

        # Create a container frame for setting3 button
        self.setting3_container = QtWidgets.QFrame(self.gague3)
        self.setting3_container.setGeometry(self.gague3.width() - 40, 5, 35, 35)
        self.setting3_container.setStyleSheet("background: transparent;")
        
        # Create setting3 button
        self.setting3 = QtWidgets.QPushButton(self.setting3_container)
        self.setting3.setGeometry(0, 0, 35, 35)
        self.setting3.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 30);
                border-radius: 17px;
            }
        """)
        self.setting3.setCursor(QtCore.Qt.PointingHandCursor)
        self.setting3.setText("")
        self.setting3.setIcon(icon7)
        self.setting3.setIconSize(QtCore.QSize(25, 25))
        self.setting3.setObjectName("setting3")

        # Add resize event handlers
        def update_setting2_pos():
            self.setting2_container.setGeometry(self.gauge2.width() - 40, 5, 35, 35)
        
        def update_setting3_pos():
            self.setting3_container.setGeometry(self.gague3.width() - 40, 5, 35, 35)

        self.gauge2.resizeEvent = lambda event: update_setting2_pos()
        self.gague3.resizeEvent = lambda event: update_setting3_pos()

        self.gauge4 = QtWidgets.QFrame(self.monitor_middle)
        self.gauge4.setFrameShape(QtWidgets.QFrame.Panel)
        self.gauge4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.gauge4.setLineWidth(5)
        self.gauge4.setObjectName("gauge4")

        # Create gauge widget for RPM
        self.gauge_widget4 = GW(self.gauge4, "RPM", unit="RPM", min_value=0, max_value=3000)
        self.gauge_widget4.setGeometry(20, 10, 250, 250)
        self.gauge_widget4.set_speed(0)

        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.gauge4)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setSpacing(0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.pushButton_17 = QtWidgets.QPushButton(self.gauge4)
        self.pushButton_17.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
                padding: 5px;
                border-radius: 17px;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 40);
                border: 2px solid rgba(255, 255, 255, 60);
            }
            QPushButton:pressed {
                background-color: rgba(0, 255, 255, 40);
                border: 2px solid rgba(0, 255, 255, 60);
            }
        """)
        self.pushButton_17.setText("")
        self.pushButton_17.setIcon(icon7)
        self.pushButton_17.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_17.setFixedSize(35, 35)
        self.pushButton_17.setObjectName("pushButton_17")
        self.horizontalLayout_13.addWidget(self.pushButton_17, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignTop)
        self.horizontalLayout_9.addWidget(self.gauge4)
        self.verticalLayout_5.addWidget(self.monitor_middle)
        self.stackedWidget.addWidget(self.monitor)
        self.performance = QtWidgets.QWidget()
        self.performance.setObjectName("performance")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.performance)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.performance_top = QtWidgets.QFrame(self.performance)
        self.performance_top.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.performance_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.performance_top.setObjectName("performance_top")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.performance_top)
        self.horizontalLayout_16.setContentsMargins(0, 10, 0, 0)
        self.horizontalLayout_16.setSpacing(0)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.performance_text = QtWidgets.QLabel(self.performance_top)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.performance_text.setFont(font)
        self.performance_text.setStyleSheet("color: rgb(255, 255, 255);")
        self.performance_text.setObjectName("performance_text")
        self.horizontalLayout_16.addWidget(self.performance_text)
        self.verticalLayout_6.addWidget(self.performance_top, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.performance_bottom = QtWidgets.QFrame(self.performance)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.performance_bottom.sizePolicy().hasHeightForWidth())
        self.performance_bottom.setSizePolicy(sizePolicy)
        self.performance_bottom.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.performance_bottom.setFrameShadow(QtWidgets.QFrame.Raised)
        self.performance_bottom.setObjectName("performance_bottom")
        
        # Create a vertical layout for performance_bottom
        self.performance_bottom_layout = QtWidgets.QVBoxLayout(self.performance_bottom)
        self.performance_bottom_layout.setContentsMargins(0, 10, 0, 0)  # Added top margin of 50 pixels
        self.performance_bottom_layout.setSpacing(0)
        
        # Create a frame for cores
        self.cores_frame = QtWidgets.QFrame()
        self.cores_frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.cores_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        
        # Move horizontalLayout_15 to cores_frame
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.cores_frame)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setSpacing(10)  # Increased spacing between frames
        self.horizontalLayout_15.setAlignment(Qt.AlignTop)
        
        # Create Core 1
        self.core1 = QtWidgets.QFrame()
        self.core1.setMinimumSize(QtCore.QSize(280, 400))  # Reduced from 400x400
        self.core1.setMaximumSize(QtCore.QSize(280, 400))  # Added maximum size
        self.core1.setFrameShape(QtWidgets.QFrame.Panel)
        self.core1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.core1.setLineWidth(5)
        self.core1.setObjectName("core1")
        
        # Create gauge widget for Core 1
        self.core1_gauge = GW(self.core1, "CORE 1")
        self.core1_gauge.setGeometry(25, 20, 250, 250)  # Adjusted position
        self.core1_gauge.set_speed(0)
        self.core1_gauge.unit = "%"
        self.core1_gauge.min_value = 0
        self.core1_gauge.max_value = 100
        
        # Add temperature and clock speed labels for Core 1
        self.core1_info = QtWidgets.QLabel(self.core1)
        self.core1_info.setGeometry(25, 280, 250, 60)  # Adjusted position
        self.core1_info.setStyleSheet("color: white; font-size: 16px;")  # Reduced font size
        self.core1_info.setAlignment(Qt.AlignCenter)
        self.core1_info.setText("Temp: -- °C\n\nClock: -- MHz")
        
        self.horizontalLayout_15.addWidget(self.core1)
        
        # Create Core 2
        self.core2 = QtWidgets.QFrame()
        self.core2.setMinimumSize(QtCore.QSize(280, 400))  # Reduced from 400x400
        self.core2.setMaximumSize(QtCore.QSize(280, 400))  # Added maximum size
        self.core2.setFrameShape(QtWidgets.QFrame.Panel)
        self.core2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.core2.setLineWidth(5)
        self.core2.setObjectName("core2")
        
        # Create gauge widget for Core 2
        self.core2_gauge = GW(self.core2, "CORE 2")
        self.core2_gauge.setGeometry(25, 20, 250, 250)  # Adjusted position
        self.core2_gauge.set_speed(0)
        self.core2_gauge.unit = "%"
        self.core2_gauge.min_value = 0
        self.core2_gauge.max_value = 100
        
        # Add temperature and clock speed labels for Core 2
        self.core2_info = QtWidgets.QLabel(self.core2)
        self.core2_info.setGeometry(25, 280, 250, 60)  # Adjusted position
        self.core2_info.setStyleSheet("color: white; font-size: 16px;")  # Reduced font size
        self.core2_info.setAlignment(Qt.AlignCenter)
        self.core2_info.setText("Temp: -- °C\n\nClock: -- MHz")
        
        self.horizontalLayout_15.addWidget(self.core2)
        
        # Create Core 3
        self.core3 = QtWidgets.QFrame()
        self.core3.setMinimumSize(QtCore.QSize(280, 400))  # Reduced from 400x400
        self.core3.setMaximumSize(QtCore.QSize(280, 400))  # Added maximum size
        self.core3.setFrameShape(QtWidgets.QFrame.Panel)
        self.core3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.core3.setLineWidth(5)
        self.core3.setObjectName("core3")
        
        # Create gauge widget for Core 3
        self.core3_gauge = GW(self.core3, "CORE 3")
        self.core3_gauge.setGeometry(25, 20, 250, 250)  # Adjusted position
        self.core3_gauge.set_speed(0)
        self.core3_gauge.unit = "%"
        self.core3_gauge.min_value = 0
        self.core3_gauge.max_value = 100
        
        # Add temperature and clock speed labels for Core 3
        self.core3_info = QtWidgets.QLabel(self.core3)
        self.core3_info.setGeometry(25, 280, 250, 60)  # Adjusted position
        self.core3_info.setStyleSheet("color: white; font-size: 16px;")  # Reduced font size
        self.core3_info.setAlignment(Qt.AlignCenter)
        self.core3_info.setText("Temp: -- °C\n\nClock: -- MHz")
        
        self.horizontalLayout_15.addWidget(self.core3)
        
        # Create Core 4
        self.core4 = QtWidgets.QFrame()
        self.core4.setMinimumSize(QtCore.QSize(280, 400))  # Reduced from 400x400
        self.core4.setMaximumSize(QtCore.QSize(280, 400))  # Added maximum size
        self.core4.setFrameShape(QtWidgets.QFrame.Panel)
        self.core4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.core4.setLineWidth(5)
        self.core4.setObjectName("core4")
        
        # Create gauge widget for Core 4
        self.core4_gauge = GW(self.core4, "CORE 4")
        self.core4_gauge.setGeometry(25, 20, 250, 250)  # Adjusted position
        self.core4_gauge.set_speed(0)
        self.core4_gauge.unit = "%"
        self.core4_gauge.min_value = 0
        self.core4_gauge.max_value = 100
        
        # Add temperature and clock speed labels for Core 4
        self.core4_info = QtWidgets.QLabel(self.core4)
        self.core4_info.setGeometry(25, 280, 250, 60)  # Adjusted position
        self.core4_info.setStyleSheet("color: white; font-size: 16px;")  # Reduced font size
        self.core4_info.setAlignment(Qt.AlignCenter)
        self.core4_info.setText("Temp: -- °C\n\nClock: -- MHz")
        
        self.horizontalLayout_15.addWidget(self.core4)
        
        # Add cores_frame to performance_bottom_layout with stretch
        self.performance_bottom_layout.addWidget(self.cores_frame)
        self.performance_bottom_layout.addStretch(1)  # Add stretch to push cores up
        self.verticalLayout_6.addWidget(self.performance_bottom)
        self.stackedWidget.addWidget(self.performance)
        self.setup = QtWidgets.QWidget()
        self.setup.setObjectName("setup")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.setup)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.setup_top = QtWidgets.QFrame(self.setup)
        self.setup_top.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.setup_top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.setup_top.setObjectName("setup_top")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.setup_top)
        self.horizontalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_18.setSpacing(0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.configuration_text = QtWidgets.QLabel(self.setup_top)
        font = QtGui.QFont()
        font.setPointSize(40)
        self.configuration_text.setFont(font)
        self.configuration_text.setStyleSheet("color: rgb(255, 255, 255);")
        self.configuration_text.setObjectName("configuration_text")
        self.horizontalLayout_18.addWidget(self.configuration_text, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.verticalLayout_7.addWidget(self.setup_top)
        self.setup_bottom = QtWidgets.QFrame(self.setup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.setup_bottom.sizePolicy().hasHeightForWidth())
        self.setup_bottom.setSizePolicy(sizePolicy)
        self.setup_bottom.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.setup_bottom.setFrameShadow(QtWidgets.QFrame.Raised)
        self.setup_bottom.setObjectName("setup_bottom")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.setup_bottom)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setSpacing(0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.setup_bottom_left = QtWidgets.QFrame(self.setup_bottom)
        self.setup_bottom_left.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.setup_bottom_left.setFrameShadow(QtWidgets.QFrame.Raised)
        self.setup_bottom_left.setObjectName("setup_bottom_left")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.setup_bottom_left)
        self.gridLayout_4.setContentsMargins(-1, 50, -1, -1)
        self.gridLayout_4.setVerticalSpacing(49)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_17 = QtWidgets.QLabel(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_17.setObjectName("label_17")
        self.gridLayout_4.addWidget(self.label_17, 0, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_18 = QtWidgets.QLabel(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_18.setObjectName("label_18")
        self.gridLayout_4.addWidget(self.label_18, 3, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_20 = QtWidgets.QLabel(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_20.setObjectName("label_20")
        self.gridLayout_4.addWidget(self.label_20, 1, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_19 = QtWidgets.QLabel(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_19.setObjectName("label_19")
        self.gridLayout_4.addWidget(self.label_19, 2, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.comboBox = QtWidgets.QComboBox(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 255);\n"
"selection-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(255, 255, 255);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_4.addWidget(self.comboBox, 0, 1, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 255);\n"
"selection-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(255, 255, 255);background-color: rgb(255, 255, 255);")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.gridLayout_4.addWidget(self.comboBox_2, 1, 1, 1, 1)
        self.comboBox_3 = QtWidgets.QComboBox(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.comboBox_3.setFont(font)
        self.comboBox_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 255);\n"
"selection-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(255, 255, 255);")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.gridLayout_4.addWidget(self.comboBox_3, 2, 1, 1, 1)
        self.comboBox_4 = QtWidgets.QComboBox(self.setup_bottom_left)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.comboBox_4.setFont(font)
        self.comboBox_4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 255);\n"
"selection-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(255, 255, 255);")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.gridLayout_4.addWidget(self.comboBox_4, 3, 1, 1, 1)
        self.horizontalLayout_17.addWidget(self.setup_bottom_left, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.setup_bottom_right = QtWidgets.QFrame(self.setup_bottom)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.setup_bottom_right.sizePolicy().hasHeightForWidth())
        self.setup_bottom_right.setSizePolicy(sizePolicy)
        self.setup_bottom_right.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.setup_bottom_right.setFrameShadow(QtWidgets.QFrame.Raised)     
        self.setup_bottom_right.setObjectName("setup_bottom_right")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.setup_bottom_right)
        self.gridLayout_5.setContentsMargins(-1, 50, -1, -1)
        self.gridLayout_5.setVerticalSpacing(55)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_22 = QtWidgets.QLabel(self.setup_bottom_right)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_22.setObjectName("label_22")
        self.gridLayout_5.addWidget(self.label_22, 1, 0, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_21 = QtWidgets.QLabel(self.setup_bottom_right)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_21.setObjectName("label_21")
        self.gridLayout_5.addWidget(self.label_21, 0, 0, 1, 1, QtCore.Qt.AlignRight|QtCore.Qt.AlignTop)
        self.comboBox_6 = QtWidgets.QComboBox(self.setup_bottom_right)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.comboBox_6.setFont(font)
        self.comboBox_6.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 255);\n"
"selection-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(255, 255, 255);")
        self.comboBox_6.setObjectName("comboBox_6")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_6, 1, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.pushButton_15 = QtWidgets.QPushButton(self.setup_bottom_right)
        font = QtGui.QFont()
        font.setPointSize(25)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.pushButton_15.setObjectName("pushButton_15")
        self.gridLayout_5.addWidget(self.pushButton_15, 2, 1, 1, 1)
        self.comboBox_5 = QtWidgets.QComboBox(self.setup_bottom_right)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_5.sizePolicy().hasHeightForWidth())
        self.comboBox_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.comboBox_5.setFont(font)
        self.comboBox_5.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 255);\n"
"selection-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(255, 255, 255);")
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("") 
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_5, 0, 1, 1, 1)
        self.horizontalLayout_17.addWidget(self.setup_bottom_right, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.setup_bottom_right.raise_()
        self.setup_bottom_left.raise_()
        self.verticalLayout_7.addWidget(self.setup_bottom)
        self.stackedWidget.addWidget(self.setup)
        # สร้างหน้าใหม่
        self.speed_direction_page = QtWidgets.QWidget()
        self.speed_direction_page.setObjectName("speed_direction_page")
        self.verticalLayout_speed_dir = QtWidgets.QVBoxLayout(self.speed_direction_page)
        self.verticalLayout_speed_dir.setContentsMargins(30, 30, 30, 30)
        self.verticalLayout_speed_dir.setSpacing(20)

        # หัวข้อ
        self.label_speed_dir_title = QtWidgets.QLabel(self.speed_direction_page)
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        self.label_speed_dir_title.setFont(font)
        self.label_speed_dir_title.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_speed_dir_title.setText("Speed & Direction Details")
        self.verticalLayout_speed_dir.addWidget(self.label_speed_dir_title, 0, QtCore.Qt.AlignHCenter)

        # --- NEW: Speed display frame ---
        self.speed_display_frame = QtWidgets.QFrame(self.speed_direction_page)
        self.speed_display_frame.setStyleSheet("background: rgba(0,0,0,0); border: 2px solid #00ffff; border-radius: 12px;")
        self.speed_display_frame.setFixedSize(220, 180)
        self.speed_display_layout = QtWidgets.QVBoxLayout(self.speed_display_frame)
        self.speed_display_layout.setContentsMargins(10, 10, 10, 10)
        self.speed_display_layout.setSpacing(0)

        # เลขความเร็วใหญ่
        self.speed_value_label = QtWidgets.QLabel(self.speed_display_frame)
        self.speed_value_label.setText("0")
        self.speed_value_label.setAlignment(QtCore.Qt.AlignHCenter)
        font_speed = QtGui.QFont()
        font_speed.setPointSize(60)
        font_speed.setBold(True)
        self.speed_value_label.setFont(font_speed)
        self.speed_value_label.setStyleSheet("color: #00ffff;")
        self.speed_display_layout.addWidget(self.speed_value_label)

        # หน่วย km/h
        self.speed_unit_label = QtWidgets.QLabel(self.speed_display_frame)
        self.speed_unit_label.setText("km/h")
        self.speed_unit_label.setAlignment(QtCore.Qt.AlignHCenter)
        font_unit = QtGui.QFont()
        font_unit.setPointSize(20)
        self.speed_unit_label.setFont(font_unit)
        self.speed_unit_label.setStyleSheet("color: #00ffff;")
        self.speed_display_layout.addWidget(self.speed_unit_label)

        # ปุ่ม FORWARD/REVERSE
        self.button_row = QtWidgets.QHBoxLayout()
        self.forward_button = QtWidgets.QPushButton("FORWARD", self.speed_display_frame)
        self.forward_button.setStyleSheet("QPushButton { background-color: #00cc44; color: white; font-size: 16px; border-radius: 8px; padding: 6px 18px; } QPushButton:pressed { background-color: #009933; }")
        self.reverse_button = QtWidgets.QPushButton("REVERSE", self.speed_display_frame)
        self.reverse_button.setStyleSheet("QPushButton { background-color: #cc2222; color: white; font-size: 16px; border-radius: 8px; padding: 6px 18px; } QPushButton:pressed { background-color: #990000; }")
        self.button_row.addWidget(self.forward_button)
        self.button_row.addWidget(self.reverse_button)
        self.speed_display_layout.addLayout(self.button_row)

        self.verticalLayout_speed_dir.addWidget(self.speed_display_frame, 0, QtCore.Qt.AlignHCenter)

        # --- END NEW ---

        # (Optional) ทิศทางปัจจุบัน (ถ้าต้องการแสดง text เล็กๆ)
        self.label_current_direction = QtWidgets.QLabel(self.speed_direction_page)
        self.label_current_direction.setFont(QtGui.QFont('Arial', 16))
        self.label_current_direction.setStyleSheet("color: rgb(0, 255, 255);")
        self.label_current_direction.setText("Current Direction: --")
        self.verticalLayout_speed_dir.addWidget(self.label_current_direction, 0, QtCore.Qt.AlignHCenter)

        # --- ซ่อน/ลบ history ---
        # self.label_history = QtWidgets.QLabel(self.speed_direction_page)
        # self.label_history.setFont(QtGui.QFont('Arial', 18))
        # self.label_history.setStyleSheet("color: rgb(255, 255, 255);")
        # self.label_history.setText("History:")
        # self.verticalLayout_speed_dir.addWidget(self.label_history)
        # self.history_list = QtWidgets.QListWidget(self.speed_direction_page)
        # self.verticalLayout_speed_dir.addWidget(self.history_list)

        # เพิ่มหน้าเข้า stackedWidget
        self.stackedWidget.addWidget(self.speed_direction_page)
        self.verticalLayout_3.addWidget(self.stackedWidget)
        self.horizontalLayout_4.addWidget(self.middle_3)
        self.right_2 = QtWidgets.QFrame(self.Header_midle)
        self.right_2.setMaximumSize(QtCore.QSize(16777182, 16777215))
        self.right_2.setStyleSheet("background-color: rgba(2, 29, 33, 247);")
        self.right_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.right_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.right_2.setObjectName("right_2")
        self.horizontalLayout_4.addWidget(self.right_2)
        self.verticalLayout.addWidget(self.Header_midle)
        self.Header_lower = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Header_lower.sizePolicy().hasHeightForWidth())
        self.Header_lower.setSizePolicy(sizePolicy)
        self.Header_lower.setStyleSheet("background-color: rgb(8, 43, 55);")
        self.Header_lower.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Header_lower.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Header_lower.setObjectName("Header_lower")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.Header_lower)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_7 = QtWidgets.QLabel(self.Header_lower)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_7.setScaledContents(True)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_3.addWidget(self.label_7, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignBottom)
        self.verticalLayout.addWidget(self.Header_lower)
        HMI.setCentralWidget(self.centralwidget)

        self.retranslateUi(HMI)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(HMI)
        
      
    def retranslateUi(self, HMI):
        _translate = QtCore.QCoreApplication.translate
        HMI.setWindowTitle(_translate("HMI", "MainWindow"))
        self.pushButton.setText(_translate("HMI", "MENU"))
        self.label.setText(_translate("HMI", "MACHINE CONTROL"))
        self.label_6.setText(_translate("HMI", "Setup"))
        self.label_4.setText(_translate("HMI", "Monitor"))
        self.label_5.setText(_translate("HMI", "Performance"))
        self.label_3.setText(_translate("HMI", "Status"))
        self.text_welcome.setText(_translate("HMI", "Rotating Wheel Control"))
       # self.label_8.setText(_translate("HMI", "Status Mechine"))
        self.label_16.setText(_translate("HMI", "USB Connect"))
        self.label_9.setText(_translate("HMI", "Motor Connect"))
        self.label_10.setText(_translate("HMI", "Sensor Connect"))
        self.label_11.setText(_translate("HMI", "HDMI Connect"))
        self.label_13.setText(_translate("HMI", "Safety 2"))
        self.label_15.setText(_translate("HMI", "Safety 4"))
        self.label_12.setText(_translate("HMI", "Safety 1"))
        self.label_14.setText(_translate("HMI", "Safety 3"))
        self.performance_text.setText(_translate("HMI", "Performance of MCU"))
        self.configuration_text.setText(_translate("HMI", "Configuration"))
        self.label_17.setText(_translate("HMI", "Motor Size"))
        self.label_18.setText(_translate("HMI", "Torque Pattern"))
        self.label_20.setText(_translate("HMI", "Rated Motor Frequency"))
        self.label_19.setText(_translate("HMI", "Rated Motor Voltage"))
        self.comboBox.setItemText(0, _translate("HMI", "0.10 KW"))
        self.comboBox.setItemText(1, _translate("HMI", "0.15 KW"))
        self.comboBox.setItemText(2, _translate("HMI", "0.20 KW"))
        self.comboBox.setItemText(3, _translate("HMI", "0.25 KW"))
        self.comboBox.setItemText(4, _translate("HMI", "0.30 KW"))
        self.comboBox.setItemText(5, _translate("HMI", "0.35 KW"))
        self.comboBox.setItemText(6, _translate("HMI", "0.40 KW"))
        self.comboBox.setItemText(7, _translate("HMI", "0.45 KW"))
        self.comboBox.setItemText(8, _translate("HMI", "0.50 KW"))
        self.comboBox.setItemText(9, _translate("HMI", "0.55 KW"))
        self.comboBox.setItemText(10, _translate("HMI", "0.60 KW"))
        self.comboBox.setItemText(11, _translate("HMI", "0.65 KW"))
        self.comboBox.setItemText(12, _translate("HMI", "0.70 KW"))
        self.comboBox.setItemText(13, _translate("HMI", "0.75 KW"))
        self.comboBox_2.setItemText(0, _translate("HMI", "50 Hz"))
        self.comboBox_2.setItemText(1, _translate("HMI", "60 Hz"))
        self.comboBox_3.setItemText(0, _translate("HMI", "Class 200V"))
        self.comboBox_3.setItemText(1, _translate("HMI", "Class 400V"))
        self.comboBox_4.setItemText(0, _translate("HMI", "Pattern A"))
        self.comboBox_4.setItemText(1, _translate("HMI", "Pattern B"))
        self.comboBox_4.setItemText(2, _translate("HMI", "Pattern C"))
        self.label_22.setText(_translate("HMI", "Parameter Send"))
        self.label_21.setText(_translate("HMI", "Radius of Defect"))
        self.comboBox_6.setItemText(0, _translate("HMI", "RPM"))
        self.comboBox_6.setItemText(1, _translate("HMI", "RPM_Triger"))
        self.comboBox_6.setItemText(2, _translate("HMI", "Linear Distance"))
        self.comboBox_6.setItemText(3, _translate("HMI", "LInear Velocity"))
        self.pushButton_15.setText(_translate("HMI", "SEND SIGNAL"))
        self.comboBox_5.setItemText(0, _translate("HMI", "0.35 m"))
        self.comboBox_5.setItemText(1, _translate("HMI", "0.36 m"))
        self.comboBox_5.setItemText(2, _translate("HMI", "0.37 m"))
        self.comboBox_5.setItemText(3, _translate("HMI", "0.38 m"))
        self.comboBox_5.setItemText(4, _translate("HMI", "0.39 m"))
        self.comboBox_5.setItemText(5, _translate("HMI", "0.40 m"))
        self.comboBox_5.setItemText(6, _translate("HMI", "0.41 m"))
        self.comboBox_5.setItemText(7, _translate("HMI", "0.42 m"))
        self.comboBox_5.setItemText(8, _translate("HMI", "0.43 m"))
        self.comboBox_5.setItemText(9, _translate("HMI", "0.44 m"))
        self.comboBox_5.setItemText(10, _translate("HMI", "0.45 m"))
        self.comboBox_5.setItemText(11, _translate("HMI", "0.46 m"))
        self.comboBox_5.setItemText(12, _translate("HMI", "0.47 m"))
        self.comboBox_5.setItemText(13, _translate("HMI", "0.48 m"))
        self.comboBox_5.setItemText(14, _translate("HMI", "0.49 m"))
        self.comboBox_5.setItemText(15, _translate("HMI", "0.50 m"))
        self.comboBox_5.setItemText(16, _translate("HMI", "0.51 m"))
        self.comboBox_5.setItemText(17, _translate("HMI", "0.52 m"))
        self.comboBox_5.setItemText(18, _translate("HMI", "0.53 m"))
        self.comboBox_5.setItemText(19, _translate("HMI", "0.54 m"))
        self.comboBox_5.setItemText(20, _translate("HMI", "0.55 m"))
        self.label_7.setText(_translate("HMI", "Rotating Wheel Control V1.3.0 | MCE02"))


        #Setup graph and plot graph
    def add_plot(self):
        # Remove existing layout if any
        if self.ui.graph.layout():
            QtWidgets.QWidget().setLayout(self.ui.graph.layout())
            
        # Create main layout
        main_layout = QtWidgets.QVBoxLayout(self.ui.graph)
        main_layout.setContentsMargins(5, 5, 5, 5)
        main_layout.setSpacing(0)
        
        # Create plot widget
        self.plot_widget = pg.GraphicsLayoutWidget()
        self.plot_widget.setBackground('black')
        
        # Setup plot
        self.plot = self.plot_widget.addPlot()
        self.current_plot_param = "Torque"  # Default parameter
        self.current_plot_unit = "Nm"  # Default unit
        self.current_y_range = (0, 7)  # Default range
        self.plot.setLabel('left', f'{self.current_plot_param} ({self.current_plot_unit})', color='white', size='7pt')
        self.plot.setLabel('bottom', 'Time (s)', color='white', size='7pt')
        self.plot.getAxis('bottom').setPen(pg.mkPen(color='white'))
        self.plot.getAxis('left').setPen(pg.mkPen(color='white'))
        self.plot.showGrid(x=True, y=True, alpha=0.2)
        self.curve = self.plot.plot(pen=pg.mkPen('y', width=2))
        self.plot.setYRange(0, 7)
        self.plot.disableAutoRange(axis='y')
        self.plot.setMouseEnabled(x=True, y=False)
        self.plot.getViewBox().setLimits(yMin=0, yMax=7)
        
        # Add plot widget to main layout
        main_layout.addWidget(self.plot_widget)
        
        # Create settings button (floating on top of plot)
        settings_button = QtWidgets.QPushButton(self.ui.graph)
        settings_button.setStyleSheet("border:none; background: transparent;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("/home/MTC_01/Documents/testhmi/user_test-main/Icon/settings-2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        settings_button.setIcon(icon)
        settings_button.setIconSize(QtCore.QSize(25, 25))
        settings_button.setFixedSize(30, 30)
        settings_button.move(self.ui.graph.width() - 35, 5)  # Position at top-right
        settings_button.clicked.connect(self.show_plot_settings)  # Connect click event
        
        # Setup data
        self.n_data = 10
        self.plot.setXRange(0, self.n_data - 1, padding=0)
        self.time_counter = 0
        self.xdata = np.array([])
        self.ydata = np.array([])
        
        # Make button stay at top-right when frame is resized
        self.ui.graph.resizeEvent = lambda event: settings_button.move(self.ui.graph.width() - 35, 5)
        
        # Start timer for random data updates
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_plot)
        self.timer.start(100)  # Update every 100ms

    def show_plot_settings(self):
        dialog = PlotSettingsDialog(self)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            # Get selected parameter
            param, unit, y_range = dialog.get_selected_parameter()            # Update plot settings
            self.current_plot_param = param
            self.current_plot_unit = unit
            self.current_y_range = y_range
            # Update plot
            self.plot.setLabel('left', f'{param} ({unit})', color='white', size='7pt')
            self.plot.setYRange(y_range[0], y_range[1])
            self.plot.getViewBox().setLimits(yMin=y_range[0], yMax=y_range[1])
            # Clear only y-data, keep x-data
            self.ydata = np.array([])
            if len(self.xdata) > 0:  # If there's existing x-data
                # Generate new y-data for existing x-data points
                for _ in range(len(self.xdata)):
                    if self.current_plot_param == "Torque":
                        value = random.uniform(0, 7)
                    else:  # Acceleration
                        value = random.uniform(0, 10)
                    self.ydata = np.append(self.ydata, value)
            # Don't reset time_counter to maintain x-axis continuity

    def update_plot(self):
        # Generate random value based on current parameter
        if self.current_plot_param == "Torque":
            value = random.uniform(0, 7)
        else:  # Acceleration
            value = random.uniform(0, 10)
        
        # Update time counter
        self.time_counter += 1
        
        # Append new data
        self.xdata = np.append(self.xdata, self.time_counter)
        self.ydata = np.append(self.ydata, value)
        
        # Keep only last n_data points
        if len(self.xdata) > self.n_data:
            self.xdata = self.xdata[-self.n_data:]
            self.ydata = self.ydata[-self.n_data:]
        
        # Update plot
        self.curve.setData(self.xdata, self.ydata)
        
        # Update x-axis range
        if self.time_counter > self.n_data:
            self.plot.setXRange(self.time_counter - self.n_data, self.time_counter, padding=0)
        else:
            self.plot.setXRange(0, self.n_data, padding=0)

    def show_voltage_settings1(self):
        dialog = VoltageSettingsDialog(self)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            # Get selected parameter
            parameter, unit, range_values = dialog.get_selected_parameter()
            # Update the gauge display
            self.update_gauge_display1(parameter, unit, range_values)
    
    def update_gauge_display1(self, parameter, unit, range_values):
        # Update gauge widget with new parameter
        self.ui.gauge_widget1.set_label(parameter)  # Update the label
        self.ui.gauge_widget1.unit = unit
        self.ui.gauge_widget1.min_value = range_values[0]
        self.ui.gauge_widget1.max_value = range_values[1]
        # Reset gauge and update display
        self.ui.gauge_widget1.set_speed(0)  # Reset to 0
        self.ui.gauge_widget1.draw_gauge()  # Redraw the gauge with new settings

    def show_voltage_settings2(self):
        dialog = VoltageSettingsDialog(self)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            # Get selected parameter
            parameter, unit, range_values = dialog.get_selected_parameter()
            # Update the gauge display
            self.update_gauge_display2(parameter, unit, range_values)
    
    def update_gauge_display2(self, parameter, unit, range_values):
        # Update gauge widget with new parameter
        self.ui.gauge_widget2.set_label(parameter)  # Update the label
        self.ui.gauge_widget2.unit = unit
        self.ui.gauge_widget2.min_value = range_values[0]
        self.ui.gauge_widget2.max_value = range_values[1]
        # Reset gauge and update display
        self.ui.gauge_widget2.set_speed(0)  # Reset to 0
        self.ui.gauge_widget2.draw_gauge()  # Redraw the gauge with new settings

    def show_voltage_settings3(self):
        dialog = VoltageSettingsDialog(self)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            # Get selected parameter
            parameter, unit, range_values = dialog.get_selected_parameter()
            # Update the gauge display
            self.update_gauge_display3(parameter, unit, range_values)

    def update_gauge_display3(self, parameter, unit, range_values):
        # Update gauge widget with new parameter
        self.ui.gauge_widget3.set_label(parameter)  # Update the label
        self.ui.gauge_widget3.unit = unit
        self.ui.gauge_widget3.min_value = range_values[0]
        self.ui.gauge_widget3.max_value = range_values[1]
        # Reset gauge and update display
        self.ui.gauge_widget3.set_speed(0)  # Reset to 0
        self.ui.gauge_widget3.draw_gauge()  # Redraw the gauge with new settings

    def show_voltage_settings4(self):
        dialog = VoltageSettingsDialog(self)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            # Get selected parameter
            parameter, unit, range_values = dialog.get_selected_parameter()
            # Update the gauge display
            self.update_gauge_display4(parameter, unit, range_values)

    def update_gauge_display4(self, parameter, unit, range_values):
        # Update gauge widget with new parameter
        self.ui.gauge_widget4.set_label(parameter)  # Update the label
        self.ui.gauge_widget4.unit = unit
        self.ui.gauge_widget4.min_value = range_values[0]
        self.ui.gauge_widget4.max_value = range_values[1]
        # Reset gauge and update display
        self.ui.gauge_widget4.set_speed(0)  # Reset to 0
        self.ui.gauge_widget4.draw_gauge()  # Redraw the gauge with new settings

    def onLabel_3Click(self, event):
        # When the label is clicked, change the page to Page 1
        self.ui.stackedWidget.setCurrentIndex(0)

    def onLabel_4Click(self, event):
        # When the label is clicked, change the page to Page 2
        self.ui.stackedWidget.setCurrentIndex(1)  
    
    def onLabel_5Click(self, event):
        # When the label is clicked, change the page to Page 3
        self.ui.stackedWidget.setCurrentIndex(2)      

    def onLabel_6Click(self, event):
        # When the label is clicked, change the page to Page 4
        self.ui.stackedWidget.setCurrentIndex(3)    

    def slideLeftMenu(self):
        width = self.ui.left_menu.width()
        if width == 75:
             newwidith = 200
        else:
             newwidith = 75
        
        self.animation = QPropertyAnimation(self.ui.left_menu, b"minimumWidth")
        self.animation.setDuration(250)
        self.animation.setStartValue(width)
        self.animation.setEndValue(newwidith)
        self.animation.setEasingCurve(QEasingCurve.InOutQuart)
        self.animation.start()

    def update_cpu_usage(self):
        """Update CPU usage, temperature and clock speed for each core"""
        try:
            # Get CPU usage per core
            cpu_percent = psutil.cpu_percent(interval=None, percpu=True)
            
            # Get CPU frequency for each core
            cpu_freqs = []
            for i in range(4):  # For 4 cores
                try:
                    with open(f'/sys/devices/system/cpu/cpu{i}/cpufreq/scaling_cur_freq', 'r') as f:
                        freq = float(f.read().strip()) / 1000  # Convert to MHz
                        cpu_freqs.append(freq)
                except:
                    # Fallback to psutil if direct file access fails
                    freq = psutil.cpu_freq(percpu=True)[i].current
                    cpu_freqs.append(freq)
            
            # Get CPU temperature
            try:
                # Try to get temperature for each core
                temps = []
                for i in range(4):
                    try:
                        with open(f'/sys/class/thermal/thermal_zone{i}/temp', 'r') as f:
                            temp = float(f.read().strip()) / 1000  # Convert to Celsius
                            temps.append(temp)
                    except:
                        # If individual core temps not available, use the main temp
                        with open('/sys/class/thermal/thermal_zone0/temp', 'r') as f:
                            temp = float(f.read().strip()) / 1000
                            temps.append(temp)
            except:
                # Fallback to psutil if direct file access fails
                temp = psutil.sensors_temperatures()['cpu_thermal'][0].current
                temps = [temp] * 4  # Use same temp for all cores
            
            # Update core 1
            self.core1_gauge.set_speed(cpu_percent[0])
            self.core1_info.setText(f"Temp: {temps[0]:.1f}°C\n\nClock: {cpu_freqs[0]:.0f} MHz")
            
            # Update core 2
            self.core2_gauge.set_speed(cpu_percent[1])
            self.core2_info.setText(f"Temp: {temps[1]:.1f}°C\n\nClock: {cpu_freqs[1]:.0f} MHz")
            
            # Update core 3
            self.core3_gauge.set_speed(cpu_percent[2])
            self.core3_info.setText(f"Temp: {temps[2]:.1f}°C\n\nClock: {cpu_freqs[2]:.0f} MHz")
            
            # Update core 4
            self.core4_gauge.set_speed(cpu_percent[3])
            self.core4_info.setText(f"Temp: {temps[3]:.1f}°C\n\nClock: {cpu_freqs[3]:.0f} MHz")
            
        except Exception as e:
            print(f"Error updating CPU info: {e}")
            # Fallback to basic psutil if all else fails
            try:
                cpu_percent = psutil.cpu_percent(interval=None, percpu=True)
                temp = psutil.sensors_temperatures()['cpu_thermal'][0].current
                freq = psutil.cpu_freq().current
                
                # Update all cores with fallback data
                for i, gauge in enumerate([self.core1_gauge, self.core2_gauge, 
                                        self.core3_gauge, self.core4_gauge]):
                    gauge.set_speed(cpu_percent[i])
                
                # Update all info labels with fallback data
                for info in [self.core1_info, self.core2_info, 
                           self.core3_info, self.core4_info]:
                    info.setText(f"Temp: {temp:.1f}°C\n\nClock: {freq:.0f} MHz")
            
            except Exception as e:
                print(f"Fallback error: {e}")

class VoltageSettingsDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Monitor Settings")
        self.setFixedSize(400, 400)
        
        # Create layout
        layout = QtWidgets.QVBoxLayout()
        
        # Create group box for display options
        group_box = QtWidgets.QGroupBox("Select Parameter")
        group_layout = QtWidgets.QVBoxLayout()
        
        # Create radio buttons for parameters with updated ranges
        self.voltage_rb = QtWidgets.QRadioButton("Voltage (V)")
        self.voltage_rb.setChecked(True)  # Default selection
        
        self.current_rb = QtWidgets.QRadioButton("Current (A)")
        self.power_rb = QtWidgets.QRadioButton("Power (W)")
        self.motor_load_rb = QtWidgets.QRadioButton("Motor Load (%)")
        self.frequency_rb = QtWidgets.QRadioButton("Frequency (Hz)")
        self.rpm_rb = QtWidgets.QRadioButton("RPM")
        self.linear_velocity_rb = QtWidgets.QRadioButton("Linear Velocity (m/s)")
        self.distance_rb = QtWidgets.QRadioButton("Distance (m)")
        
        # Add radio buttons to group layout
        group_layout.addWidget(self.voltage_rb)
        group_layout.addWidget(self.current_rb)
        group_layout.addWidget(self.power_rb)
        group_layout.addWidget(self.motor_load_rb)
        group_layout.addWidget(self.frequency_rb)
        group_layout.addWidget(self.rpm_rb)
        group_layout.addWidget(self.linear_velocity_rb)
        group_layout.addWidget(self.distance_rb)
        
        # Set group box layout
        group_box.setLayout(group_layout)
        
        # Create buttons
        button_box = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel
        )
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        # Add widgets to main layout
        layout.addWidget(group_box)
        layout.addWidget(button_box)
        
        self.setLayout(layout)
    
    def get_selected_parameter(self):
        if self.voltage_rb.isChecked():
            return "VOLTAGE", "V", (0, 220)  # Updated range
        elif self.current_rb.isChecked():
            return "CURRENT", "A", (0, 3)  # Updated range
        elif self.power_rb.isChecked():
            return "POWER", "W", (0, 400)  # Updated range
        elif self.motor_load_rb.isChecked():
            return "MOTOR LOAD", "%", (0, 100)  # Updated range
        elif self.frequency_rb.isChecked():
            return "FREQUENCY", "Hz", (0, 60)  # Updated range
        elif self.rpm_rb.isChecked():
            return "RPM", "RPM", (0, 3000)  # Keep random
        elif self.linear_velocity_rb.isChecked():
            return "LINEAR VELOCITY", "m/s", (0, 30)  # Keep random
        elif self.distance_rb.isChecked():
            return "DISTANCE", "m", (0, 1000)  # Keep random
        return "VOLTAGE", "V", (0, 220)  # Default with updated range

class PlotSettingsDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Plot Settings")
        self.setFixedSize(300, 200)
        
        # Create layout
        layout = QtWidgets.QVBoxLayout()
        
        # Create group box for display options
        group_box = QtWidgets.QGroupBox("Select Parameter")
        group_layout = QtWidgets.QVBoxLayout()
        
        # Create radio buttons for parameters
        self.torque_rb = QtWidgets.QRadioButton("Torque (Nm)")
        self.torque_rb.setChecked(True)  # Default selection
        self.acceleration_rb = QtWidgets.QRadioButton("Acceleration (m/s²)")
        
        # Add radio buttons to group layout
        group_layout.addWidget(self.torque_rb)
        group_layout.addWidget(self.acceleration_rb)
        
        # Set group box layout
        group_box.setLayout(group_layout)
        
        # Create buttons
        button_box = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel
        )
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        # Add widgets to main layout
        layout.addWidget(group_box)
        layout.addWidget(button_box)
        
        self.setLayout(layout)
    
    def get_selected_parameter(self):
        if self.torque_rb.isChecked():
            return "Torque", "Nm", (0, 7)
        else:
            return "Acceleration", "m/s²", (0, 10)

class MainWindow(QMainWindow, Ui_HMI):
    def __init__(self):
        QMainWindow.__init__(self)
        self.ui = Ui_HMI()
        self.ui.setupUi(self)
# หลัง self.ui.setupUi(self)
# ... หลัง self.ui.setupUi(self) ...

# 1. สร้างปุ่มและ label
        speed_btn = QtWidgets.QPushButton(self.ui.menu)
        speed_lbl = QtWidgets.QLabel(self.ui.menu)
        speed_btn.setText("")
        speed_btn.setIcon(QtGui.QIcon("/home/MTC_01/Documents/testhmi/user_test-main/Icon/speedometer.png"))
        speed_btn.setIconSize(QtCore.QSize(35, 35))
        speed_lbl.setText("Speed & Direction")
        speed_lbl.setFont(QtGui.QFont('Arial', 18))
        speed_lbl.setStyleSheet("color: rgb(255, 255, 255);")

# 2. สร้าง container และ layout
        container = QtWidgets.QFrame(self.ui.menu)
        container.setObjectName("menu_container_speed_dir")
        container.setMinimumHeight(55)
        container.setStyleSheet("QFrame { border: none; background: transparent; border-radius: 12px; }")
        layout = QtWidgets.QHBoxLayout(container)
        layout.setContentsMargins(20, 0, 0, 0)
        layout.setSpacing(20)
        speed_btn.setFixedSize(35, 35)
        speed_lbl.setFixedSize(120, 35)
        layout.addWidget(speed_btn)
        layout.addWidget(speed_lbl)

# 3. เพิ่ม container เข้า gridLayout (ล่างสุด)
        row = self.ui.gridLayout.rowCount()
        self.ui.gridLayout.addWidget(container, row, 0, 1, 2)

# 4. เพิ่มเข้า list
        self.ui.menu_buttons.append(speed_btn)
        self.ui.menu_labels.append(speed_lbl)
        self.ui.menu_containers.append(container)

# 5. เชื่อมปุ่มกับการเปลี่ยนหน้า (index = index ของ speed_direction_page ใน stackedWidget)
        speed_page_index = self.ui.stackedWidget.count() - 1  # หน้าใหม่อยู่ล่างสุด
        speed_btn.clicked.connect(lambda: self.handle_menu_click(speed_page_index))
        speed_lbl.mousePressEvent = lambda event, index=speed_page_index: self.handle_menu_click(index)
        # Initialize status data
        self.status_data = {
            'hirz': 0,
            'current': 0,
            'volt': 0,
            'power': 0,
            'thermal': 0,
            'motor_factor': 0
        }
        
        # Start status display thread
        self.status_thread = threading.Thread(target=self.update_status_data, daemon=True)
        self.status_thread.start()
        
        # Add plot
        self.add_plot()
        
        # Initialize button states
        self.button_states = {
            'button6': {'is_lit': True, 'is_blinking': True},
            'button7': {'is_lit': True, 'is_blinking': True},
            'button8': {'is_lit': True, 'is_blinking': True},
            'button9': {'is_lit': True, 'is_blinking': True},
            'button10': {'is_lit': True, 'is_blinking': True},
            'button11': {'is_lit': True, 'is_blinking': True},
            'button12': {'is_lit': True, 'is_blinking': True},
            'button13': {'is_lit': True, 'is_blinking': True}
        }

        # Setup update timer for gauges
        self.gauge_timer = QTimer()
        self.gauge_timer.timeout.connect(self.update_gauges)
        self.gauge_timer.start(100)  # Update every 100ms
        
        # Setup cpu timer
        self.cpu_timer = QTimer()
        self.cpu_timer.timeout.connect(self.update_cpu_usage)
        self.cpu_timer.start(500)


        # Initialize menu buttons and labels
        self.menu_buttons = [
            self.ui.pushButton_2,
            self.ui.pushButton_3,
            self.ui.pushButton_4,
            self.ui.pushButton_5
        ]
        
        self.menu_labels = [
            self.ui.label_3,
            self.ui.label_4,
            self.ui.label_5,
            self.ui.label_6
        ]
        
        # Set initial styles for menu buttons
        self.setup_menu_buttons()

       # Initialize CPU gauges
        self.core1_gauge = self.ui.core1_gauge
        self.core2_gauge = self.ui.core2_gauge
        self.core3_gauge = self.ui.core3_gauge
        self.core4_gauge = self.ui.core4_gauge

        self.core1_info = self.ui.core1_info
        self.core2_info = self.ui.core2_info
        self.core3_info = self.ui.core3_info
        self.core4_info = self.ui.core4_info

        self.show()  # Set up the user interface

        # Connect buttons to actions with highlighting
        self.ui.pushButton_2.clicked.connect(lambda: self.handle_menu_click(0))
        self.ui.pushButton_3.clicked.connect(lambda: self.handle_menu_click(1))
        self.ui.pushButton_4.clicked.connect(lambda: self.handle_menu_click(2))
        self.ui.pushButton_5.clicked.connect(lambda: self.handle_menu_click(3))
        self.ui.pushButton.clicked.connect(lambda: self.slideLeftMenu())
        
        # Connect settings button
        self.ui.setting1.clicked.connect(self.show_voltage_settings1)
        self.ui.setting2.clicked.connect(self.show_voltage_settings2)
        self.ui.setting3.clicked.connect(self.show_voltage_settings3)
        self.ui.pushButton_17.clicked.connect(self.show_voltage_settings4)

        # Enable interaction on labels
        for i, label in enumerate(self.menu_labels):
            label.setTextInteractionFlags(Qt.TextSelectableByMouse)
            label.mousePressEvent = lambda event, index=i: self.handle_menu_click(index)

    def setup_menu_buttons(self):
        """Setup initial styles for menu buttons and labels"""
        # Create container frames for each menu item if not exists
        if not hasattr(self, 'menu_containers'):
            self.menu_containers = []
            for i, (button, label) in enumerate(zip(self.menu_buttons, self.menu_labels)):
                container = QtWidgets.QFrame(self.ui.menu)
                container.setObjectName(f"menu_container_{i}")
                container.setMinimumHeight(55)  # Set minimum height for container
                container.setStyleSheet("""
                    QFrame {
                        border: none;
                        background: transparent;
                        border-radius: 12px;
                        
                    }
                    QFrame:hover {
                        background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, 
                            stop:0 rgba(255, 255, 255, 30), 
                            stop:1 rgba(255, 255, 255, 10));
                    }
                """)
                
                # Create horizontal layout for container
                layout = QtWidgets.QHBoxLayout(container)
                layout.setContentsMargins(20, 0, 0, 0)  # Left margin of 20px
                layout.setSpacing(20)  # Space between button and label
                
                # Move button and label to container
                button.setParent(None)
                label.setParent(None)
                
                # Add button with fixed size
                button.setFixedSize(35, 35)  # Adjusted button size
                layout.addWidget(button)
                
                # Add label with fixed size
                label.setFixedSize(120, 35)  # Adjusted label size
                layout.addWidget(label)
                
                # Add container to grid layout with vertical spacing
                self.ui.gridLayout.addWidget(container, i, 0, 1, 2)
                
                # Add container to the list
                self.menu_containers.append(container)
            
            # Set vertical spacing for the grid layout
            self.ui.gridLayout.setVerticalSpacing(35)  # Increased spacing between menu items
            self.ui.gridLayout.setContentsMargins(0, 30, 0, 0)  # Added top margin

        # Style for buttons
        normal_style_button = """
            QPushButton {
                border: none;
                background-color: transparent;
                padding: 0px;
                border-radius: 12px;
            }
        """
        
        active_style_button = """
            QPushButton {
                border: none;
                background-color: transparent;
                padding: 0px;
                border-radius: 12px;
            }
        """

        # Style for containers
        normal_style_container = """
            QFrame {
                border: none;
                background: transparent;
                border-radius: 12px;
                
            }
            QFrame:hover {
                background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, 
                    stop:0 rgba(255, 255, 255, 30), 
                    stop:1 rgba(255, 255, 255, 10));
            }
        """
        
        active_style_container = """
            QFrame {
                border: none;
                background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, 
                    stop:0 rgba(0, 255, 255, 30), 
                    stop:1 rgba(0, 255, 255, 10));
                border-radius: 12px;
               
            }
        """

        normal_style_label = """
            QLabel {
                color: rgb(255, 255, 255);
                background: transparent;
                font-size: 18px;  /* Adjusted font size */
            }
        """
        
        active_style_label = """
            QLabel {
                color: rgb(0, 255, 255);
                background: transparent;
                font-size: 18px;  /* Adjusted font size */
            }
        """
        
        # Set initial styles
        for container, button, label in zip(self.menu_containers, self.menu_buttons, self.menu_labels):
            container.setStyleSheet(normal_style_container)
            button.setStyleSheet(normal_style_button)
            label.setStyleSheet(normal_style_label)
        
        # Set active style for first button and label (Status)
        if self.menu_containers:  # Check if list is not empty
            self.menu_containers[0].setStyleSheet(active_style_container)
            self.menu_buttons[0].setStyleSheet(active_style_button)
            self.menu_labels[0].setStyleSheet(active_style_label)

    def handle_menu_click(self, index):
        """Handle menu button clicks with highlighting"""
        # Change page
        self.ui.stackedWidget.setCurrentIndex(index)
        
        # Style for buttons
        normal_style_button = """
            QPushButton {
                border: none;
                background-color: transparent;
                padding: 0px;
                border-radius: 12px;
            }
        """
        
        active_style_button = """
            QPushButton {
                border: none;
                background-color: transparent;
                padding: 0px;
                border-radius: 12px;
            }
        """

        # Style for containers
        normal_style_container = """
            QFrame {
                border: none;
                background: transparent;
                border-radius: 12px;
            }
            QFrame:hover {
                background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, 
                    stop:0 rgba(255, 255, 255, 30), 
                    stop:1 rgba(255, 255, 255, 10));
            }
        """
        
        active_style_container = """
            QFrame {
                border: none;
                background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, 
                    stop:0 rgba(0, 255, 255, 30), 
                    stop:1 rgba(0, 255, 255, 10));
                border-radius: 12px;
            }
        """

        normal_style_label = """
            QLabel {
                color: rgb(255, 255, 255);
                background: transparent;
                font-size: 18px;
            }
        """
        
        active_style_label = """
            QLabel {
                color: rgb(0, 255, 255);
                background: transparent;
                font-size: 18px;
            }
        """
        
        # Reset all styles to normal
        for container, button, label in zip(self.menu_containers, self.menu_buttons, self.menu_labels):
            container.setStyleSheet(normal_style_container)
            button.setStyleSheet(normal_style_button)
            label.setStyleSheet(normal_style_label)
        
        # Set active style for clicked button and its label
        self.menu_containers[index].setStyleSheet(active_style_container)
        self.menu_buttons[index].setStyleSheet(active_style_button)
        self.menu_labels[index].setStyleSheet(active_style_label)

    def setup_status_buttons(self):
        """Setup all status indicator buttons with initial style"""
        buttons = [
            self.ui.pushButton_6,
            self.ui.pushButton_7,
            self.ui.pushButton_8,
            self.ui.pushButton_9,
            self.ui.pushButton_10,
            self.ui.pushButton_11,
            self.ui.pushButton_12,
            self.ui.pushButton_13
        ]
        
        for button in buttons:
            button.setFixedSize(35, 35)
            self.set_button_style(button, True)  # Set initial style (lit)

    def set_button_style(self, button, is_lit):
        """Set the style for a button based on its state"""
        color = "#FF1493" if is_lit else "#2F4F4F"
        button.setStyleSheet(f"""
            QPushButton {{
                background-color: {color};
                border-radius: 17px;
                border: none;
            }}
        """)

    def update_button_state(self, button_key):
        """Update the state of a specific button"""
        state = self.button_states[button_key]
        if state['is_blinking']:
            state['is_lit'] = not state['is_lit']
            return state['is_lit']
        return state['is_lit']

    def update_all_buttons(self):
        """Update all buttons' states and appearances"""
        button_mapping = {
            'button6': self.ui.pushButton_6,
            'button7': self.ui.pushButton_7,
            'button8': self.ui.pushButton_8,
            'button9': self.ui.pushButton_9,
            'button10': self.ui.pushButton_10,
            'button11': self.ui.pushButton_11,
            'button12': self.ui.pushButton_12,
            'button13': self.ui.pushButton_13

        }
        
        for button_key, button in button_mapping.items():
            is_lit = self.update_button_state(button_key)
            self.set_button_style(button, is_lit)

    def set_button_blinking(self, button_key, should_blink):
        """Enable or disable blinking for a specific button"""
        if button_key in self.button_states:
            self.button_states[button_key]['is_blinking'] = should_blink
            if not should_blink:
                # If stopping blinking, set to lit state
                self.button_states[button_key]['is_lit'] = True
                button = getattr(self.ui, f'pushButton_{button_key[-1]}')
                self.set_button_style(button, True)

    def update_status_data(self):
        """Update status data from VFD in background thread"""
        while True:
            try:
                data = read_status_vfd()
                if data:
                    self.status_data.update({
                        'hirz': float(data[0]/100),  # Convert to Hz
                        'current': float(data[1]/10),  # Convert to A
                        'volt': float(data[2] * 0.1),  # Convert to V
                        'power': float(data[3]/10 * 1000),  # Convert to W
                        'thermal': float(data[4]),  # Already in %
                        'motor_factor': float(data[5])  # Already in %
                    })
            except Exception as e:
                print(f"Error reading VFD status: {e}")
            QtCore.QThread.msleep(100)  # Sleep for 100ms

    def update_gauges(self):
        """Update all gauge displays with real or random values"""
        # Get RPM and velocity values
        rpm_data = get_rpm_values()
        
        # Update gauge 1 (Voltage)
        if self.ui.gauge_widget1.label_text == "VOLTAGE":
            self.ui.gauge_widget1.set_speed(self.status_data['volt'])
        elif self.ui.gauge_widget1.label_text == "CURRENT":
            self.ui.gauge_widget1.set_speed(self.status_data['current'])
        elif self.ui.gauge_widget1.label_text == "POWER":
            self.ui.gauge_widget1.set_speed(self.status_data['power'])
        elif self.ui.gauge_widget1.label_text == "MOTOR LOAD":
            self.ui.gauge_widget1.set_speed(self.status_data['motor_factor'])
        elif self.ui.gauge_widget1.label_text == "FREQUENCY":
            self.ui.gauge_widget1.set_speed(self.status_data['hirz'])
        elif self.ui.gauge_widget1.label_text == "RPM":
            self.ui.gauge_widget1.set_speed(rpm_data['rpm'])
        elif self.ui.gauge_widget1.label_text == "LINEAR VELOCITY":
            self.ui.gauge_widget1.set_speed(rpm_data['velocity_mps'])
        elif self.ui.gauge_widget1.label_text == "DISTANCE":
            self.ui.gauge_widget1.set_speed(rpm_data['distance'])
        else:
            # Random value for other parameters
            self.ui.gauge_widget1.set_speed(random.uniform(0, 100))

        # Update gauge 2 (Current)
        if self.ui.gauge_widget2.label_text == "VOLTAGE":
            self.ui.gauge_widget2.set_speed(self.status_data['volt'])
        elif self.ui.gauge_widget2.label_text == "CURRENT":
            self.ui.gauge_widget2.set_speed(self.status_data['current'])
        elif self.ui.gauge_widget2.label_text == "POWER":
            self.ui.gauge_widget2.set_speed(self.status_data['power'])
        elif self.ui.gauge_widget2.label_text == "MOTOR LOAD":
            self.ui.gauge_widget2.set_speed(self.status_data['motor_factor'])
        elif self.ui.gauge_widget2.label_text == "FREQUENCY":
            self.ui.gauge_widget2.set_speed(self.status_data['hirz'])
        elif self.ui.gauge_widget2.label_text == "RPM":
            self.ui.gauge_widget2.set_speed(rpm_data['rpm'])
        elif self.ui.gauge_widget2.label_text == "LINEAR VELOCITY":
            self.ui.gauge_widget2.set_speed(rpm_data['velocity_mps'])
        elif self.ui.gauge_widget2.label_text == "DISTANCE":
            self.ui.gauge_widget2.set_speed(rpm_data['distance'])
        else:
            # Random value for other parameters
            self.ui.gauge_widget2.set_speed(random.uniform(0, 100))

        # Update gauge 3 (Frequency)
        if self.ui.gauge_widget3.label_text == "VOLTAGE":
            self.ui.gauge_widget3.set_speed(self.status_data['volt'])
        elif self.ui.gauge_widget3.label_text == "CURRENT":
            self.ui.gauge_widget3.set_speed(self.status_data['current'])
        elif self.ui.gauge_widget3.label_text == "POWER":
            self.ui.gauge_widget3.set_speed(self.status_data['power'])
        elif self.ui.gauge_widget3.label_text == "MOTOR LOAD":
            self.ui.gauge_widget3.set_speed(self.status_data['motor_factor'])
        elif self.ui.gauge_widget3.label_text == "FREQUENCY":
            self.ui.gauge_widget3.set_speed(self.status_data['hirz'])
        elif self.ui.gauge_widget3.label_text == "RPM":
            self.ui.gauge_widget3.set_speed(rpm_data['rpm'])
        elif self.ui.gauge_widget3.label_text == "LINEAR VELOCITY":
            self.ui.gauge_widget3.set_speed(rpm_data['velocity_mps'])
        elif self.ui.gauge_widget3.label_text == "DISTANCE":
            self.ui.gauge_widget3.set_speed(rpm_data['distance'])
        else:
            # Random value for other parameters
            self.ui.gauge_widget3.set_speed(random.uniform(0, 100))

        # Update gauge 4 (RPM)
        if self.ui.gauge_widget4.label_text == "VOLTAGE":
            self.ui.gauge_widget4.set_speed(self.status_data['volt'])
        elif self.ui.gauge_widget4.label_text == "CURRENT":
            self.ui.gauge_widget4.set_speed(self.status_data['current'])
        elif self.ui.gauge_widget4.label_text == "POWER":
            self.ui.gauge_widget4.set_speed(self.status_data['power'])
        elif self.ui.gauge_widget4.label_text == "MOTOR LOAD":
            self.ui.gauge_widget4.set_speed(self.status_data['motor_factor'])
        elif self.ui.gauge_widget4.label_text == "FREQUENCY":
            self.ui.gauge_widget4.set_speed(self.status_data['hirz'])
        elif self.ui.gauge_widget4.label_text == "RPM":
            self.ui.gauge_widget4.set_speed(rpm_data['rpm'])
        elif self.ui.gauge_widget4.label_text == "LINEAR VELOCITY":
            self.ui.gauge_widget4.set_speed(rpm_data['velocity_mps'])
        elif self.ui.gauge_widget4.label_text == "DISTANCE":
            self.ui.gauge_widget4.set_speed(rpm_data['distance'])
        else:
            # Random value for other parameters
            self.ui.gauge_widget4.set_speed(random.uniform(0, 100))

    def update_speed_direction_details(self, speed, direction):
        self.ui.label_current_speed.setText(f"Current Speed: {speed:.2f} m/s")
        self.ui.label_current_direction.setText(f"Current Direction: {direction}")
        self.ui.history_list.addItem(f"Speed: {speed:.2f} m/s, Direction: {direction}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()  # Show the main window
    sys.exit(app.exec_())
